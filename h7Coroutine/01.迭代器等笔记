1.迭代器
    可迭代类型：
    字符串，列表，元组,字典，
    迭代是访问集合元素的一种方式。迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。
    迭代器只能往前不会后退。
    我们分析对可迭代对象进行迭代使用的过程，发现每迭代一次（即在for...in...中每循环一次）都会返回对象中的下一条数据，
    一直向后读取数据直到迭代了所有数据后结束。
    那么，在这个过程中就应该有一个“人”去记录每次访问到了第几条数据，
    以便每次迭代都可以返回下一条数据。我们把这个能帮助我们进行数据迭代的“人”称为迭代器(Iterator)。
    可迭代对象的本质就是可以向我们提供一个这样的中间“人”即迭代器帮助我们对其进行迭代遍历使用。

    可迭代对象通过__iter__方法向我们提供一个迭代器，我们在迭代一个可迭代对象的时候，实际上就是先获取该对象提供的一个迭代器，
    然后通过这个迭代器来依次获取对象中的每一个数据.
    迭代器是用来帮助我们记录每次迭代访问到的位置，当我们对迭代器使用next()函数的时候，迭代器会向我们返回它所记录位置的下一个位置的数据。实际上，
    在使用next()函数的时候，
    调用的就是迭代器对象的__next__方法（Python3中是对象的__next__方法，Python2中是对象的next()方法）。
    所以，我们要想构造一个迭代器，就要实现它的__next__方法。但这还不够，python要求迭代器本身也是可迭代的，所以我们还要为迭代器实现__iter__方法，
    而__iter__方法要返回一个迭代器，
    迭代器自身正是一个迭代器，所以迭代器的__iter__方法返回自身即可。
    一个实现了__iter__方法和__next__方法的对象，就是迭代器。
2.生成器
3.装饰器